// Generated by CoffeeScript 1.3.3
(function() {
  var CACHE_PATH, CWD, CWD_LENGTH, coffee, compileSync, fs, loadCoffee, loadStreamline, mkdirpSync, mtimeSync, path, readFileSync, registerExtensions, requireSync, streamline, writeFileSync;

  fs = require('fs');

  path = require('path');

  loadCoffee = function() {
    return require('coffee-script');
  };

  loadStreamline = function(mode) {
    var Module, Module_compile, streamline;
    if (mode == null) {
      mode = 'callbacks';
    }
    Module = require('module');
    Module_compile = Module.prototype._compile;
    streamline = require('streamline');
    streamline.register({
      fibers: mode === 'fibers'
    });
    Module.prototype._compile = Module_compile;
    return require("streamline/lib/" + mode + "/transform");
  };

  coffee = loadCoffee();

  streamline = loadStreamline();

  CWD = process.cwd();

  CWD_LENGTH = CWD.length;

  CACHE_PATH = ".cache/" + coffee.VERSION + "-" + streamline.version;

  mkdirpSync = function(dir) {
    dir = path.resolve(path.normalize(dir));
    try {
      return fs.mkdirSync(dir, 511);
    } catch (e) {
      switch (e.code) {
        case 'EEXIST':
          break;
        case 'ENOENT':
          mkdirpSync(path.dirname(dir));
          return mkdirpSync(dir);
        default:
          throw e;
      }
    }
  };

  mtimeSync = function(path) {
    try {
      return fs.statSync(path).mtime;
    } catch (e) {
      return 0;
    }
  };

  readFileSync = function(path) {
    return fs.readFileSync(path, 'utf8');
  };

  writeFileSync = function(path, content) {
    return fs.writeFileSync(path, content, 'utf8');
  };

  mkdirpSync(CACHE_PATH);

  compileSync = function(sourcePath) {
    var ext, output, source;
    ext = path.extname(sourcePath);
    source = readFileSync(sourcePath);
    output = source;
    if (ext === '.coffee' || ext === '._coffee') {
      output = coffee.compile(output, {
        filename: sourcePath,
        bare: true
      });
    }
    if (sourcePath.match(/(_\.|\._)(js|coffee)$/)) {
      output = streamline.transform(output, {
        lines: 'preserve'
      });
    }
    return output;
  };

  requireSync = function(module, sourcePath) {
    var cachedMtime, cachedPath, content, sourceMtime;
    cachedPath = path.join(CACHE_PATH, 0 === sourcePath.indexOf(CWD) ? path.join('rel', sourcePath.substr(CWD_LENGTH)) : path.join('abs', sourcePath));
    sourceMtime = mtimeSync(sourcePath);
    cachedMtime = mtimeSync(cachedPath);
    if (cachedMtime >= sourceMtime) {
      content = readFileSync(cachedPath);
    } else {
      content = compileSync(sourcePath);
      mkdirpSync(path.dirname(cachedPath));
      writeFileSync(cachedPath, content);
    }
    module._compile(content, sourcePath);
    return registerExtensions();
  };

  (registerExtensions = function() {
    var ext, _i, _len, _ref, _results;
    _ref = ['.js', '.coffee', '._js', '._coffee'];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ext = _ref[_i];
      _results.push(require.extensions[ext] = requireSync);
    }
    return _results;
  })();

}).call(this);
